// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gamecenter.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 要定義你Request & Res的Struct
type TestRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRequest) Reset()         { *m = TestRequest{} }
func (m *TestRequest) String() string { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()    {}
func (*TestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gamecenter_b29ab1138ae714dd, []int{0}
}
func (m *TestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRequest.Unmarshal(m, b)
}
func (m *TestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRequest.Marshal(b, m, deterministic)
}
func (dst *TestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRequest.Merge(dst, src)
}
func (m *TestRequest) XXX_Size() int {
	return xxx_messageInfo_TestRequest.Size(m)
}
func (m *TestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestRequest proto.InternalMessageInfo

type TestReply struct {
	State                string   `protobuf:"bytes,1,opt,name=State,json=state" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestReply) Reset()         { *m = TestReply{} }
func (m *TestReply) String() string { return proto.CompactTextString(m) }
func (*TestReply) ProtoMessage()    {}
func (*TestReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_gamecenter_b29ab1138ae714dd, []int{1}
}
func (m *TestReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestReply.Unmarshal(m, b)
}
func (m *TestReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestReply.Marshal(b, m, deterministic)
}
func (dst *TestReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestReply.Merge(dst, src)
}
func (m *TestReply) XXX_Size() int {
	return xxx_messageInfo_TestReply.Size(m)
}
func (m *TestReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TestReply.DiscardUnknown(m)
}

var xxx_messageInfo_TestReply proto.InternalMessageInfo

func (m *TestReply) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func init() {
	proto.RegisterType((*TestRequest)(nil), "api.TestRequest")
	proto.RegisterType((*TestReply)(nil), "api.TestReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GameCenterClient is the client API for GameCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameCenterClient interface {
	// Request & Res都要寫，不可空
	Ping(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error)
}

type gameCenterClient struct {
	cc *grpc.ClientConn
}

func NewGameCenterClient(cc *grpc.ClientConn) GameCenterClient {
	return &gameCenterClient{cc}
}

func (c *gameCenterClient) Ping(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := c.cc.Invoke(ctx, "/api.GameCenter/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameCenterServer is the server API for GameCenter service.
type GameCenterServer interface {
	// Request & Res都要寫，不可空
	Ping(context.Context, *TestRequest) (*TestReply, error)
}

func RegisterGameCenterServer(s *grpc.Server, srv GameCenterServer) {
	s.RegisterService(&_GameCenter_serviceDesc, srv)
}

func _GameCenter_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameCenterServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GameCenter/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameCenterServer).Ping(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameCenter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.GameCenter",
	HandlerType: (*GameCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GameCenter_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gamecenter.proto",
}

func init() { proto.RegisterFile("gamecenter.proto", fileDescriptor_gamecenter_b29ab1138ae714dd) }

var fileDescriptor_gamecenter_b29ab1138ae714dd = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x4f, 0xcc, 0x4d,
	0x4d, 0x4e, 0xcd, 0x2b, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c,
	0xc8, 0x54, 0xe2, 0xe5, 0xe2, 0x0e, 0x49, 0x2d, 0x2e, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e,
	0x51, 0x52, 0xe4, 0xe2, 0x84, 0x70, 0x0b, 0x72, 0x2a, 0x85, 0x44, 0xb8, 0x58, 0x83, 0x4b, 0x12,
	0x4b, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x58, 0x8b, 0x41, 0x1c, 0x23, 0x0b, 0x2e,
	0x2e, 0xf7, 0xc4, 0xdc, 0x54, 0x67, 0xb0, 0x51, 0x42, 0x5a, 0x5c, 0x2c, 0x01, 0x99, 0x79, 0xe9,
	0x42, 0x02, 0x7a, 0x89, 0x05, 0x99, 0x7a, 0x48, 0x46, 0x49, 0xf1, 0x21, 0x89, 0x14, 0xe4, 0x54,
	0x2a, 0x31, 0x38, 0xb1, 0x2d, 0x62, 0x62, 0xf6, 0xf0, 0x09, 0x4f, 0x62, 0x03, 0xdb, 0x6f, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xbb, 0x1b, 0x37, 0x93, 0x00, 0x00, 0x00,
}
